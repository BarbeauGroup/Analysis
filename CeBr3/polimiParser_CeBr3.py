from ROOT import TFile, gROOT, gSystemimport ROOTimport osimport sysfrom array import arraygROOT.SetStyle("Plain")#Check user supplied input file nameif len(sys.argv) != 2:	print( "\nERROR: Incorrect call!" )	print( "Correct usage is python polimiParser.py <filename>\n" )	sys.exit()#Open data filefilename=sys.argv[1]file=open(filename, "r")text=file.read()file.close()#Open output fileoutFile=ROOT.TFile(filename+".root","RECREATE") #output file#Create TTreeeventTree=ROOT.TTree("eventTree","Events and information")#Set up TTree brancheshistoryNum=array('i',[0])particleNum=array('i',[0])projectileType=array('i',[0])interactionType=array('i',[0])targetNucleus=array('i',[0])cellNum=array('i',[0])energy=array('d',[0.])time=array('d',[0.])xLoc=array('d',[0.])yLoc=array('d',[0.])zLoc=array('d',[0.])particleWeight=array('d',[0])generationNum=array('i',[0])numScatterings=array('i',[0])code=array('d',[0])eventTree.Branch('historyNum',historyNum,'historyNum/I')eventTree.Branch('particleNum',particleNum,'particleNum/I')eventTree.Branch('projectileType',projectileType,'projectileType/I')eventTree.Branch('interactionType',interactionType,'interactionType/I')eventTree.Branch('targetNucleus',targetNucleus,'targetNucleus/I')eventTree.Branch('cellNum',cellNum,'cellNum/I')eventTree.Branch('energy',energy,'energy/D')eventTree.Branch('time',time,'time/D')eventTree.Branch('xLoc',xLoc,'xLoc/D')eventTree.Branch('yLoc',yLoc,'yLoc/D')eventTree.Branch('zLoc',zLoc,'zLoc/D')eventTree.Branch('particleWeight',particleWeight,'particleWeight/D')eventTree.Branch('generationNum',generationNum,'hisgenerationNumtoryNum/I')eventTree.Branch('numScatterings',numScatterings,'numScatterings/I')eventTree.Branch('code',code,'code/D')recoilTree=ROOT.TTree("recoilTree","Combined energy of events")histNum=array('i',[0])recE=array('d',[0]) #Energy in the CeBr3 crystal.bdE=array('d',[0]) #Energy in the backing detector.badEventFlag=array('i',[0])tof=array('d',[0])nucleus=array('i',[0])prevHistoryNum=0combinedEnergy=0recoilTree.Branch('histNum',histNum,'histNum/I')recoilTree.Branch('recE',recE,'recE/D')recoilTree.Branch('bdE',bdE,'bdE/D')recoilTree.Branch('tof',tof,'tof/D')recoilTree.Branch('nucleus',nucleus,'nucleus/I')#record which cell we want to use.scatterCell = 101#Split text into list entries with \n delimiterlines=text.split('\n')print( 'Parsing...' )#Step through, add entries to ttree branches, fillfor index, line in enumerate(lines[0:len(lines)-1]):	#split line by white space	args = line.split()	#check this line is valid, i.e. has 16 columns	#if len(args) != 16:		#print "Error on line " + str(index) + ", less than 16 args in line, skipping"		#continue	#update braches	historyNum[0]=int(args[0])	particleNum[0]=int(args[1])	projectileType[0]=int(args[2])	interactionType[0]=int(args[3])	targetNucleus[0]=int(args[4])	cellNum[0]=int(args[5])	energy[0]=float(args[6])	time[0]=float(args[7])*10.	xLoc[0]=float(args[8])	yLoc[0]=float(args[9])	zLoc[0]=float(args[10])	particleWeight[0]=float(args[11])	generationNum[0]=int(args[12])	numScatterings[0]=int(args[13])	code[0]=float(args[13])	#fill	eventTree.Fill()	tofFlag = 0	if ( cellNum[0] == scatterCell ):		#if the historyNum of this deposition == the histNum we're totaling energy for		if ( int(args[0]) == prevHistoryNum ):			##Increment the total energy			#print "Adding total energy"			#Factor of 1000 converts to keV			combinedEnergy=combinedEnergy+1000*float(args[6])		else:			#If we're not on the first particle, fill the tree			if (prevHistoryNum != 0):				histNum[0]=prevHistoryNum				recE[0]=combinedEnergy				recoilTree.Fill()			#Reset the total energy (in keV)			combinedEnergy=1000*float(args[6])			startTime=float(args[7])*10.			tof[0]=0 #Reset the stopwatch.			bdE[0]=0			tofFlag=0			nucleus[0] = int(args[4])		prevHistoryNum=int(args[0])		prevCellNum=int(args[5])	else: #We're in the backing detector, total up bd energy and get tof.		if( tofFlag == 0 ): #If this is the first interaction in the backing detector, record time of flight.			tof[0] = float(args[7])*10.			tofFlag = 1		#if the historyNum of this deposition == the histNum we're totaling energy for		if ( int(args[0]) == prevHistoryNum ):			bdE[0]=bdE[0]+1000*float(args[6])	#Fill the last particle numrecoilTree.Fill()print( "Done!" )print( filename+".root created" )#write ttreeeventTree.Write()recoilTree.Write()#close output fileoutFile.Close()